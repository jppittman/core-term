// src/backends/mod.rs

use crate::glyph::{AttrFlags, Color};
use anyhow::Result;
use std::os::unix::io::RawFd;

// Re-export driver implementations
pub mod console;
pub mod x11;

// Potentially re-export the concrete types if needed directly by main
// pub use console::ConsoleDriver;
// pub use x11::XDriver;

// --- Public Constants ---
// Moved from x11.rs to be accessible by all backends (e.g., console.rs for defaults)
// These are default character dimensions used if a backend cannot determine them,
// or for initial setup before full metrics are available.
pub const DEFAULT_WINDOW_WIDTH_CHARS: usize = 80;
pub const DEFAULT_WINDOW_HEIGHT_CHARS: usize = 24;

/// Represents events originating from the backend (platform-specific UI/input).
/// These events are processed by the Orchestrator, which may then update the
/// TerminalEmulator or perform other actions.
#[derive(Debug, Clone)]
pub enum BackendEvent {
    /// A keyboard key was pressed.
    Key {
        /// Platform-specific key symbol (e.g., X11 KeySym or a more abstract representation).
        keysym: u32,
        /// Text generated by the key event (e.g., from XLookupString or similar).
        text: String,
    },
    /// The window or display area was resized.
    /// Provides new dimensions in pixels. The orchestrator will use these
    /// along with font metrics to calculate new cell dimensions for the terminal.
    Resize {
        /// New width in pixels.
        width_px: u16,
        /// New height in pixels.
        height_px: u16,
    },
    /// The application received a request to close (e.g., user clicked the close button).
    CloseRequested,
    /// Input focus gained.
    FocusGained,
    /// Input focus lost.
    FocusLost,
}

/// Defines coordinates for a single character cell (0-based).
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct CellCoords {
    pub x: usize,
    pub y: usize,
}

/// Defines the visual style for a run of text.
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct TextRunStyle {
    pub fg: Color,
    pub bg: Color,
    pub flags: AttrFlags,
}

/// Defines a rectangular area of cells (0-based coordinates, width/height in cells).
#[derive(Debug, Clone, Copy, PartialEq)]
pub struct CellRect {
    pub x: usize,
    pub y: usize,
    pub width: usize,
    pub height: usize,
}

/// Defines the interface for a rendering and platform interaction driver.
///
/// A `Driver` is responsible for:
/// 1.  Window and display setup and management.
/// 2.  Handling platform-specific events (input, resize, close requests) and
///     translating them into `BackendEvent`s.
/// 3.  Providing an event source (e.g., a file descriptor) for the main event loop.
/// 4.  Implementing abstract drawing primitives that the `Renderer` can use
///     to draw the terminal state without knowing backend specifics.
/// 5.  Providing font and display metrics.
pub trait Driver {
    /// Creates and initializes a new driver instance.
    /// The orchestrator might pass configuration details here.
    /// Initial dimensions might be hints or determined by the driver.
    fn new() -> Result<Self>
    where
        Self: Sized;

    /// Returns a file descriptor that the orchestrator can monitor (e.g., with epoll)
    /// for platform events. Returns `None` if the driver uses a different event
    /// notification mechanism or polls internally.
    fn get_event_fd(&self) -> Option<RawFd>;

    /// Processes any pending platform events.
    /// This method should be called when the `get_event_fd()` indicates activity,
    /// or periodically if no FD is provided.
    /// It translates native platform events into a list of `BackendEvent`s.
    fn process_events(&mut self) -> Result<Vec<BackendEvent>>;

    /// Retrieves the dimensions of a single character cell in pixels.
    /// Returns `(width_px, height_px)`.
    fn get_font_dimensions(&self) -> (usize, usize);

    /// Retrieves the current dimensions of the display area managed by this driver in pixels.
    /// Returns `(width_px, height_px)`. This might be the window client area size.
    fn get_display_dimensions_pixels(&self) -> (u16, u16);

    // --- Abstract Drawing Primitives ---

    /// Clears the entire display area with the specified background color.
    /// This is typically called at the beginning of a full redraw.
    fn clear_all(&mut self, bg: Color) -> Result<()>;

    /// Draws a run of text characters at a given cell coordinate.
    ///
    /// # Arguments
    /// * `coords` - The `CellCoords` (column, row) where the text run begins.
    /// * `text` - The string of characters to draw. Assumed to be single-width by default,
    ///            but driver should handle based on font metrics if possible.
    /// * `style` - The `TextRunStyle` (fg, bg, flags) for the text.
    fn draw_text_run(&mut self, coords: CellCoords, text: &str, style: TextRunStyle) -> Result<()>;

    /// Fills a rectangular area of cells with a specified color.
    /// This is typically used for clearing parts of lines or drawing backgrounds.
    ///
    /// # Arguments
    /// * `rect` - The `CellRect` defining the area to fill.
    /// * `color` - The `Color` to fill the rectangle with.
    fn fill_rect(&mut self, rect: CellRect, color: Color) -> Result<()>;

    /// Presents the composed frame to the display.
    /// For double-buffered systems, this would swap buffers. For others, it might flush an output stream.
    fn present(&mut self) -> Result<()>;

    /// Performs any necessary cleanup before the driver is dropped.
    /// This includes releasing platform resources (e.g., closing display connections,
    /// restoring terminal modes). This method should be idempotent.
    fn cleanup(&mut self) -> Result<()>;
}
