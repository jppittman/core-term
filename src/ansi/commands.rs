// src/ansi/commands.rs

//! Defines the different types of commands that can be generated by the ANSI parser.
//! These commands represent the actions requested by ANSI escape sequences and
//! control characters, forming a structured intermediate representation (AST-like).

use crate::glyph::Color; // Assuming Color is defined in glyph.rs

/// The main enum representing any parsed ANSI command or character.
#[derive(Debug, Clone, PartialEq)]
pub enum AnsiCommand {
    /// A printable text character.
    Print(char),
    /// A C0 control character.
    C0Control(C0Control),
    /// A Control Sequence Introducer (CSI) sequence.
    Csi(CsiCommand),
    /// An Operating System Command (OSC) sequence.
    Osc(OscCommand),
    /// A Device Control String (DCS) sequence. (Basic placeholder)
    Dcs(Vec<u8>), // Store raw bytes for now
    /// Other escape sequences (e.g., SCS - Select Character Set). (Basic placeholder)
    EscapeSequence(char, Vec<char>), // Final byte, intermediates
    /// An unrecognized or ignored sequence/byte in a specific state.
    /// Useful for debugging or logging unexpected input.
    Ignore(u8),
    /// A sequence that caused a parser error and was aborted.
    Error(String),
}

/// Represents C0 control characters (0x00-0x1F, 0x7F).
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum C0Control {
    Null,       // 0x00 NUL
    Bell,       // 0x07 BEL
    Backspace,  // 0x08 BS
    Tab,        // 0x09 HT
    LineFeed,   // 0x0A LF
    VerticalTab,// 0x0B VT (often treated as LF)
    FormFeed,   // 0x0C FF (often treated as LF)
    CarriageReturn, // 0x0D CR
    ShiftOut,   // 0x0E SO
    ShiftIn,    // 0x0F SI
    Cancel,     // 0x18 CAN
    Substitute, // 0x1A SUB
    Escape,     // 0x1B ESC (Handled by parser state, but could be a command if unhandled)
    Delete,     // 0x7F DEL
    // Add other C0 controls if they have specific terminal actions
    // DeviceControl1, // 0x11 DC1 (XON)
    // DeviceControl3, // 0x13 DC3 (XOFF)
    // ...
    Unknown(u8), // For C0 codes we don't explicitly handle
}

/// Represents the different types of CSI (Control Sequence Introducer) commands.
/// Parameters are included where applicable. Coordinates are 1-based as in the sequences.
#[derive(Debug, Clone, PartialEq)]
pub enum CsiCommand {
    /// Cursor Up (CUU): `Pn A` - Move cursor up `Pn` rows (default 1).
    CursorUp(u16),
    /// Cursor Down (CUD): `Pn B` - Move cursor down `Pn` rows (default 1).
    CursorDown(u16),
    /// Cursor Forward (CUF): `Pn C` - Move cursor forward `Pn` columns (default 1).
    CursorForward(u16),
    /// Cursor Backward (CUB): `Pn D` - Move cursor backward `Pn` columns (default 1).
    CursorBackward(u16),
    /// Cursor Next Line (CNL): `Pn E` - Move cursor to beginning of next line, `Pn` lines down (default 1).
    CursorNextLine(u16),
    /// Cursor Preceding Line (CPL): `Pn F` - Move cursor to beginning of previous line, `Pn` lines up (default 1).
    CursorPrevLine(u16),
    /// Cursor Horizontal Absolute (CHA): `Pn G` - Move cursor to column `Pn` (default 1).
    CursorHorizontalAbsolute(u16),
    /// Cursor Position (CUP) / Horizontal and Vertical Position (HVP): `Pn ; Pm H/f` - Move cursor to row `Pn`, column `Pm` (default 1,1).
    CursorPosition { row: u16, col: u16 },
    /// Vertical Line Position Absolute (VPA): `Pn d` - Move cursor to row `Pn` (default 1).
    VerticalLineAbsolute(u16),

    /// Erase Display (ED): `Pn J` - Erase part of the display.
    EraseDisplay(EraseMode),
    /// Erase Line (EL): `Pn K` - Erase part of the current line.
    EraseLine(EraseMode),
    /// Erase Character (ECH): `Pn X` - Erase `Pn` characters from cursor (default 1).
    EraseCharacter(u16),
    /// Delete Character (DCH): `Pn P` - Delete `Pn` characters from cursor (default 1).
    DeleteCharacter(u16),
    /// Insert Blank Lines (IL): `Pn L` - Insert `Pn` blank lines at cursor row (default 1).
    InsertLine(u16),
    /// Delete Lines (DL): `Pn M` - Delete `Pn` lines from cursor row (default 1).
    DeleteLine(u16),
    /// Insert Blank Characters (ICH): `Pn @` - Insert `Pn` blank characters at cursor (default 1).
    InsertCharacter(u16),

    /// Scroll Up (SU): `Pn S` - Scroll text up `Pn` lines (default 1).
    ScrollUp(u16),
    /// Scroll Down (SD): `Pn T` - Scroll text down `Pn` lines (default 1).
    ScrollDown(u16),

    /// Horizontal Tabulation Set (HTS): `H` - Set a tab stop at the current column. (Often ESC H, but can be CSI)
    SetTabStop, // Note: ECMA-48 lists CSI H as HTS, VT52 lists ESC H. Handle both?
    /// Cursor Forward Tabulation (CHT): `Pn I` - Move cursor forward `Pn` tab stops (default 1).
    CursorForwardTab(u16),
    /// Cursor Backward Tabulation (CBT): `Pn Z` - Move cursor backward `Pn` tab stops (default 1).
    CursorBackwardTab(u16),
    /// Tabulation Clear (TBC): `Pn g` - Clear tab stops. Pn=0: current, Pn=3: all.
    TabClear(u16),

    /// Select Graphic Rendition (SGR): `Pn...m` - Set text attributes.
    SetGraphicsRendition(Vec<SgrParameter>),

    /// Device Status Report (DSR): `Pn n` - Report terminal status.
    DeviceStatusReport(u16),
    /// Primary Device Attributes (DA): `Pn c` - Report device attributes.
    DeviceAttributes(u16),

    /// Set Scrolling Region (DECSTBM): `Pt ; Pb r` - Set top and bottom margins (1-based).
    SetScrollingRegion { top: u16, bottom: u16 },

    /// Save Cursor (DECSC / SCOSC): `s` - Save cursor position and attributes.
    SaveCursor,
    /// Restore Cursor (DECRC / SCORC): `u` - Restore cursor position and attributes.
    RestoreCursor,

    /// DEC Private Mode Set (DECSET): `? Pn h` - Enable a DEC private mode.
    DecPrivateModeSet(DecPrivateMode),
    /// DEC Private Mode Reset (DECRST): `? Pn l` - Disable a DEC private mode.
    DecPrivateModeReset(DecPrivateMode),

    /// Unhandled CSI sequence: Store intermediate and final bytes for logging/debugging.
    UnhandledCsi { intermediates: Vec<char>, final_byte: char, params: Vec<u16> },
}

/// Represents the different modes for erase operations (ED, EL).
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum EraseMode {
    /// Erase from cursor to end of line/display (0).
    ToEnd,
    /// Erase from start of line/display to cursor (1).
    ToStart,
    /// Erase entire line/display (2).
    All,
    /// Erase scrollback buffer (ED only) (3).
    Scrollback,
    /// An unknown or unsupported erase parameter.
    Unknown(u16),
}

/// Represents the different types of OSC (Operating System Command) commands.
#[derive(Debug, Clone, PartialEq)]
pub enum OscCommand {
    /// Set Window Title and Icon Name: `0; <text> ST`
    SetIconAndWindowTitle(String),
    /// Set Icon Name: `1; <text> ST`
    SetIconName(String),
    /// Set Window Title: `2; <text> ST`
    SetWindowTitle(String),
    /// Unhandled OSC command: Store the command number and data.
    UnhandledOsc { command: i32, data: String },
    // Add other OSC commands as needed (e.g., palette changes, hyperlinks)
}

/// Represents a single parameter within an SGR (Select Graphic Rendition) sequence.
/// This breaks down the SGR parameters into a more structured format.
#[derive(Debug, Clone, PartialEq)]
pub enum SgrParameter {
    /// Reset all attributes to default.
    Reset,
    /// Set bold font.
    Bold,
    /// Set faint font.
    Faint,
    /// Set italic font.
    Italic,
    /// Set underline.
    Underline,
    /// Set blinking (slow or fast).
    Blink,
    /// Set reverse video.
    Reverse,
    /// Set hidden text.
    Hidden,
    /// Set strikethrough.
    Strikethrough,
    /// Set normal intensity (cancel bold/faint).
    NormalIntensity,
    /// Disable italic.
    ItalicOff,
    /// Disable underline.
    UnderlineOff,
    /// Disable blinking.
    BlinkOff,
    /// Disable reverse video.
    ReverseOff,
    /// Disable hidden text.
    HiddenOff,
    /// Disable strikethrough.
    StrikethroughOff,
    /// Set foreground color from 8-color palette (0-7).
    ForegroundBasic(u8),
    /// Set background color from 8-color palette (0-7).
    BackgroundBasic(u8),
    /// Set foreground color from 16-color palette (0-15, includes bright).
    Foreground16Color(u8),
    /// Set background color from 16-color palette (0-15, includes bright).
    Background16Color(u8),
    /// Set foreground color from 256-color palette (0-255).
    Foreground256Color(u8),
    /// Set background color from 256-color palette (0-255).
    Background256Color(u8),
    /// Set foreground color using 24-bit RGB values.
    ForegroundRgb(u8, u8, u8),
    /// Set background color using 24-bit RGB values.
    BackgroundRgb(u8, u8, u8),
    /// Set default foreground color.
    ForegroundDefault,
    /// Set default background color.
    BackgroundDefault,
    /// An unknown or unsupported SGR parameter value.
    Unknown(u16),
}

/// Represents DEC Private Modes (CSI ? Pn h/l).
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum DecPrivateMode {
    /// Cursor Keys Application Mode (DECCKM): 1
    CursorKeysAppMode,
    /// Origin Mode (DECOM): 6
    OriginMode,
    /// Text Cursor Enable Mode (DECTCEM): 25
    CursorVisibility,
    /// Use Alternate Screen Buffer (47, 1047).
    UseAlternateScreenBuffer,
    /// Save Cursor (1048).
    SaveCursor, // Note: This is different from the standard CSI s
    /// Use Alternate Screen Buffer and Save/Restore Cursor (1049).
    UseAltScreenAndSaveRestoreCursor,
    // Add other DEC Private Modes as needed (e.g., Mouse tracking modes)
    /// An unknown or unsupported DEC Private Mode parameter.
    Unknown(u16),
}


// Helper function to convert a raw SGR parameter value into a structured SgrParameter enum.
// This logic will be used by the parser when it encounters an SGR sequence.
impl SgrParameter {
    pub fn from_param(param: u16, params: &[u16], current_idx: &mut usize) -> Self {
        match param {
            0 => SgrParameter::Reset,
            1 => SgrParameter::Bold,
            2 => SgrParameter::Faint,
            3 => SgrParameter::Italic,
            4 => SgrParameter::Underline,
            5 | 6 => SgrParameter::Blink, // Slow and Fast Blink are often treated the same
            7 => SgrParameter::Reverse,
            8 => SgrParameter::Hidden,
            9 => SgrParameter::Strikethrough,
            22 => SgrParameter::NormalIntensity,
            23 => SgrParameter::ItalicOff,
            24 => SgrParameter::UnderlineOff,
            25 => SgrParameter::BlinkOff,
            27 => SgrParameter::ReverseOff,
            28 => SgrParameter::HiddenOff,
            29 => SgrParameter::StrikethroughOff,

            // Basic colors (30-37 FG, 40-47 BG)
            30..=37 => SgrParameter::ForegroundBasic((param - 30) as u8),
            40..=47 => SgrParameter::BackgroundBasic((param - 40) as u8),

            // Default colors
            39 => SgrParameter::ForegroundDefault,
            49 => SgrParameter::BackgroundDefault,

            // Bright colors (90-97 FG, 100-107 BG)
            90..=97 => SgrParameter::Foreground16Color((param - 90 + 8) as u8),
            100..=107 => SgrParameter::Background16Color((param - 100 + 8) as u8),

            // Extended colors (38 FG, 48 BG)
            38 | 48 => {
                let is_fg = param == 38;
                *current_idx += 1; // Consume the specifier parameter (5 or 2)
                if *current_idx >= params.len() {
                    // Missing specifier
                    return SgrParameter::Unknown(param); // Or a specific error variant
                }
                let specifier = params[*current_idx];

                match specifier {
                    5 => { // 256-color mode
                        *current_idx += 1; // Consume the color index parameter
                        if *current_idx >= params.len() {
                            // Missing color index
                            return SgrParameter::Unknown(param); // Or error
                        }
                        let color_idx = params[*current_idx];
                        if color_idx <= 255 {
                            if is_fg { SgrParameter::Foreground256Color(color_idx as u8) }
                            else { SgrParameter::Background256Color(color_idx as u8) }
                        } else {
                            SgrParameter::Unknown(color_idx) // Invalid index
                        }
                    }
                    2 => { // Truecolor (RGB) mode
                        *current_idx += 1; // Consume R
                        if *current_idx >= params.len() { return SgrParameter::Unknown(param); }
                        let r = params[*current_idx].min(255) as u8;

                        *current_idx += 1; // Consume G
                        if *current_idx >= params.len() { return SgrParameter::Unknown(param); }
                        let g = params[*current_idx].min(255) as u8;

                        *current_idx += 1; // Consume B
                        if *current_idx >= params.len() { return SgrParameter::Unknown(param); }
                        let b = params[*current_idx].min(255) as u8;

                        if is_fg { SgrParameter::ForegroundRgb(r, g, b) }
                        else { SgrParameter::BackgroundRgb(r, g, b) }
                    }
                    _ => SgrParameter::Unknown(specifier), // Unknown specifier
                }
            }

            _ => SgrParameter::Unknown(param), // Unhandled parameter value
        }
    }
}

// Helper function to convert a raw DEC Private Mode parameter into a structured DecPrivateMode enum.
impl DecPrivateMode {
    pub fn from_param(param: u16) -> Self {
        match param {
            1 => DecPrivateMode::CursorKeysAppMode,
            6 => DecPrivateMode::OriginMode,
            25 => DecPrivateMode::CursorVisibility,
            47 | 1047 => DecPrivateMode::UseAlternateScreenBuffer,
            1048 => DecPrivateMode::SaveCursor,
            1049 => DecPrivateMode::UseAltScreenAndSaveRestoreCursor,
            _ => DecPrivateMode::Unknown(param),
        }
    }
}

// Helper function to convert a raw erase mode parameter into a structured EraseMode enum.
impl EraseMode {
    pub fn from_param(param: u16) -> Self {
        match param {
            0 => EraseMode::ToEnd,
            1 => EraseMode::ToStart,
            2 => EraseMode::All,
            3 => EraseMode::Scrollback,
            _ => EraseMode::Unknown(param),
        }
    }
}


