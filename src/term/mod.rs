// src/backends/mod.rs

//! Defines the common interface (`TerminalBackend`) and events for different
//! terminal rendering and interaction backends (e.g., X11, console).

use crate::term::{Term, Cursor}; // Import Term and Cursor
use anyhow::Result; // Use anyhow for Results
use std::time::Duration;
use log::{trace,warn}; // Use trace for FrameGuard drop

// --- Backend Trait Definition ---

/// Represents a backend responsible for rendering the terminal screen
/// and handling user input events.
pub trait TerminalBackend {
    /// Initializes the backend (e.g., opens window, sets up TTY).
    fn new() -> Result<Self> where Self: Sized;

    /// Runs the main event loop for the backend.
    /// Should handle input events, PTY reads, and trigger drawing updates.
    fn run(&mut self, term: &mut Term) -> Result<()>;

    /// Creates a `FrameGuard` to manage a single drawing frame.
    /// This is the primary way to initiate drawing operations.
    fn frame(&mut self) -> Result<FrameGuard<'_, Self>> where Self: Sized {
        FrameGuard::new(self)
    }

    // --- Internal Methods (Called by FrameGuard) ---
    // These methods form the core drawing API that specific backends implement.
    // They are marked pub(super) assuming backends are in submodules.

    /// Prepares the backend for drawing a new frame (e.g., clear buffer, acquire lock).
    #[doc(hidden)] // Hide from public docs, used internally by FrameGuard
    fn begin_draw_internal(&mut self) -> Result<()> { Ok(()) } // Default no-op

    /// Draws a single line of the terminal state to the backend's buffer/target.
    #[doc(hidden)]
    fn draw_line_internal(&mut self, _term: &Term, _y: usize) -> Result<()> { Ok(()) } // Default no-op

    /// Draws the cursor at its current position.
    /// `old_cursor` is the position *before* the latest PTY processing,
    /// used by some backends to efficiently erase the old cursor position.
    #[doc(hidden)]
    fn draw_cursor_internal(&mut self, _term: &Term, _old_cursor: Cursor) -> Result<()> { Ok(()) } // Default no-op

    /// Finalizes the drawing frame (e.g., flushes buffer to screen/stdout, releases lock).
    #[doc(hidden)]
    fn end_draw_internal(&mut self) -> Result<()> { Ok(()) } // Default no-op

    /// Optional: Handles terminal bell request.
    fn bell(&mut self) -> Result<()> { Ok(()) } // Default no-op
}

/// Events that can be generated by a backend's event loop.
#[derive(Debug, Clone, PartialEq, Eq)]
pub enum BackendEvent {
    /// User input bytes to be written to the PTY.
    PtyWrite(Vec<u8>),
    /// Request to resize the terminal state.
    Resize(usize, usize),
    /// Request to exit the application.
    Exit,
    /// Window close requested (e.g., user clicked the close button).
    /// Note: This might not always lead to immediate Exit.
    CloseRequested,
    /// No event occurred within the timeout.
    Timeout,
}

/// Helper struct to define event polling behavior.
pub struct PollConfig {
    pub timeout: Option<Duration>,
}

// --- FrameGuard Implementation ---

/// An RAII guard that manages the lifecycle of a single drawing frame.
/// Ensures that `begin_draw_internal` and `end_draw_internal` are called correctly,
/// even in case of errors or panics during drawing operations.
#[must_use = "The frame guard must be used to draw; dropping it early finishes the frame"]
pub struct FrameGuard<'a, B: TerminalBackend + ?Sized> {
    backend: &'a mut B,
    // Flag to prevent double-calling end_draw_internal on panic + normal drop
    finished: bool,
}

impl<'a, B: TerminalBackend + ?Sized> FrameGuard<'a, B> {
    /// Creates a new FrameGuard, calling `begin_draw_internal` on the backend.
    /// Typically called via `TerminalBackend::frame()`.
    pub(super) fn new(backend: &'a mut B) -> Result<Self> {
        backend.begin_draw_internal()?;
        Ok(FrameGuard { backend, finished: false })
    }

    /// Draws a specific line using the backend's internal method.
    pub fn draw_line(&mut self, term: &Term, y: usize) -> Result<()> {
        self.backend.draw_line_internal(term, y)
    }

    /// Draws the cursor using the backend's internal method.
    /// Passes the previous cursor position for potential optimization.
    pub fn draw_cursor(&mut self, term: &Term, old_cursor: Cursor) -> Result<()> {
        self.backend.draw_cursor_internal(term, old_cursor)
    }

    /// Explicitly finishes the frame, calling `end_draw_internal`.
    /// This is useful if you need to handle potential errors from `end_draw_internal`.
    /// If not called explicitly, `Drop` will call `end_draw_internal`.
    pub fn finish(mut self) -> Result<()> {
        self.finished = true;
        self.backend.end_draw_internal()
    }
}

impl<'a, B: TerminalBackend + ?Sized> Drop for FrameGuard<'a, B> {
    /// Ensures `end_draw_internal` is called when the FrameGuard goes out of scope,
    /// unless `finish()` was already called explicitly.
    fn drop(&mut self) {
        if !self.finished {
            trace!("FrameGuard dropped, calling end_draw_internal automatically.");
            if let Err(e) = self.backend.end_draw_internal() {
                // Log the error, but don't panic in drop
                warn!("Error during automatic end_draw_internal in FrameGuard drop: {:?}", e);
            }
        }
    }
}

