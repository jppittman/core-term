// myterm/src/term/mod.rs

//! This module defines the core terminal emulator logic.
//! It acts as a state machine processing inputs and producing actions.

// Sub-modules - existing and new
pub mod cursor;
pub mod screen;
pub mod unicode;

pub mod action;
pub mod charset;
mod emulator;
pub mod modes;

// Re-export items for easier use by other modules and within this module
pub use action::EmulatorAction;
pub use charset::{map_to_dec_line_drawing, CharacterSet};
pub use emulator::TerminalEmulator;
pub use modes::{DecModeConstant, DecPrivateModes, EraseMode, Mode};

// Crate-level imports (adjust paths based on where items are moved)
use crate::{
    ansi::commands::AnsiCommand,
    backends::{BackendEvent, MouseButton, MouseEventType}, // Assuming these are available
    config::{KeySymbol, Modifiers},
    // Use crate::color::Color directly where needed, or via glyph::Color
    glyph::Glyph,
    term::cursor::{CursorController, ScreenContext},
    term::screen::Screen,
};
// Explicitly import Color and NamedColor if they are used directly in this module's functions,
// though they are mostly encapsulated within other types like Attributes.

// Logging

/// Default tab interval.
pub const DEFAULT_TAB_INTERVAL: u8 = 8;
/// Default cursor shape (e.g., 2 for block).
pub(crate) const DEFAULT_CURSOR_SHAPE: u16 = 2;

/// Internal control events for the TerminalEmulator.
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum ControlEvent {
    FrameRendered,                       // Signifies that a frame has been rendered.
    Resize { cols: usize, rows: usize }, // Signals a resize to new cell dimensions.
}

/// Inputs that the terminal emulator processes.
///
/// This enum encapsulates the different kinds of data or events
/// that the `TerminalEmulator` can receive and act upon. It serves as the
/// primary "instruction set" for the terminal's internal state machine.
#[derive(Debug, Clone, PartialEq)]
pub enum EmulatorInput {
    /// An ANSI command or sequence parsed from the output of the
    /// program running in the PTY (Pseudo-Terminal).
    Ansi(AnsiCommand),

    /// An event originating from the user (e.g., keyboard input) or the
    /// backend system (e.g., window resize, focus change), as reported
    /// by the `Driver`.
    User(BackendEvent),
    /// An internal control event, such as a resize notification from the orchestrator.
    Control(ControlEvent),

    /// A single raw character. This variant might be used for scenarios
    /// where direct character printing is intended without full ANSI
    /// processing, or for specific unhandled cases. (Consider if this
    /// should always be wrapped in an AnsiCommand::Print for consistency).
    RawChar(char),
}

/// User-initiated actions, translated from backend events or internal logic.
#[derive(Debug, Clone, PartialEq)]
pub enum UserInputAction {
    KeyInput {
        symbol: KeySymbol,
        modifiers: Modifiers,
        text: Option<String>, // Text generated by IME or key press
    },
    MouseInput {
        event_type: MouseEventType, // From crate::backends
        col: usize,                 // 0-based cell column
        row: usize,                 // 0-based cell row
        button: MouseButton,        // From crate::backends
        modifiers: Modifiers,
    },
    InitiateCopy,
    InitiatePaste,
    PasteText(String), // Content from clipboard to be pasted
}

// --- Selection-related Enums and Structs ---

/// Defines the mode of text selection.
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum SelectionMode {
    /// Standard linear text selection.
    Normal,
    /// Rectangular block selection.
    Block,
}

/// Represents the state of an active text selection within the terminal.
/// Coordinates are 0-based (col, row).
/// `start` is where selection began, `end` is the current drag point.
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct SelectionState {
    pub start: (usize, usize), // (col, row)
    pub end: (usize, usize),   // (col, row)
    pub mode: SelectionMode,
}

// --- Structs for Rendering Snapshots ---

/// Represents the visual state of the cursor for rendering.
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct CursorRenderState {
    /// 0-based column of the cursor.
    pub col: usize,
    /// 0-based row of the cursor.
    pub row: usize,
    /// Shape of the cursor (e.g., block, underline, bar).
    /// This could be an enum or a u16 matching configuration.
    pub shape: u16, // Matches config.cursor.shape
    /// Whether the cursor should be visible.
    pub is_visible: bool,
}

/// Represents a single line of cells in a `RenderSnapshot`.
#[derive(Debug, Clone, PartialEq)]
pub struct SnapshotLine {
    /// The glyphs in this line.
    pub cells: Vec<Glyph>,
    /// Flag indicating if this line is considered dirty and needs rerendering.
    /// Note: This is for the renderer's information. The emulator's internal
    /// dirty tracking might be more granular or operate differently.
    pub is_dirty: bool,
}

/// Represents the state of a text selection for rendering purposes.
/// This is part of `RenderSnapshot`.
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub struct SelectionRenderState {
    /// The starting coordinates (col, row) of the selection area.
    pub start_coords: (usize, usize),
    /// The ending coordinates (col, row) of the selection area.
    pub end_coords: (usize, usize),
    /// The mode of selection (e.g., Normal, Block).
    pub mode: SelectionMode,
}

/// A snapshot of the terminal's state intended for rendering.
///
/// This struct provides all necessary information for the renderer to draw
/// the terminal screen, including cell content, cursor state, and selection state.
#[derive(Debug, Clone, PartialEq)]
pub struct RenderSnapshot {
    /// Dimensions of the terminal grid (columns, rows).
    pub dimensions: (usize, usize),
    /// The content of each line in the terminal grid.
    pub lines: Vec<SnapshotLine>,
    /// Current state of the cursor for rendering. `None` if cursor should not be rendered.
    pub cursor_state: Option<CursorRenderState>,
    /// Current state of the text selection for rendering. `None` if no active selection.
    pub selection_state: Option<SelectionRenderState>,
}

/// Defines the interface the Renderer uses to interact with a terminal implementation.
pub trait TerminalInterface {
    fn dimensions(&self) -> (usize, usize);
    fn get_glyph(&self, x: usize, y: usize) -> Glyph;
    // Method to get a full snapshot for rendering.
    fn get_render_snapshot(&self) -> RenderSnapshot;
    fn is_cursor_visible(&self) -> bool;
    fn get_screen_cursor_pos(&self) -> (usize, usize);
    fn take_dirty_lines(&mut self) -> Vec<usize>;
    fn interpret_input(&mut self, input: EmulatorInput) -> Option<EmulatorAction>;
    // Removed: is_cursor_visible, get_screen_cursor_pos, take_dirty_lines
    // These are now implicitly handled by or part of get_render_snapshot.
}

// The actual implementation of TerminalInterface for TerminalEmulator is in src/term/emulator.rs
// This file defines the traits and shared data structures for the `term` module.

#[cfg(test)]
mod tests;
