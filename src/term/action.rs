// src/term/action.rs

//! Defines actions and events used within the terminal emulator module.
//! This includes user-initiated actions, control events, and actions
//! the emulator signals to the orchestrator.

use crate::backends::{KeySymbol, Modifiers}; // Assuming these are re-exported via backends

// --- User Input Actions ---

// Placeholder for MouseButton and MouseEventType until fully defined
// These might come from backends module as well if they are part of BackendEvent::Mouse
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub enum MouseButton { /* TODO: Define variants like Left, Middle, Right, etc. */ Placeholder }
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub enum MouseEventType { /* TODO: Define variants like Press, Release, Move */ Placeholder }

/// Represents user-initiated actions that serve as input to the terminal emulator.
/// This corresponds to `EmulatorInput::User(UserInputAction)`.
#[derive(Debug, Clone, PartialEq)] // Eq might be tricky if text is String
pub enum UserInputAction {
    KeyInput {
        symbol: KeySymbol,
        modifiers: Modifiers,
        text: Option<String>, // Text from IME or key press, if any
    },
    MouseInput {
        col: usize,          // 0-based cell column
        row: usize,          // 0-based cell row
        event_type: MouseEventType,
        button: MouseButton,
        modifiers: Modifiers,
    },
    InitiateCopy,
    InitiatePaste,
    PasteText(String), // Content from clipboard to be pasted
    // Other user-driven actions can be added here.
}

// --- Emulator Control Events ---

/// Represents internal control events for the terminal emulator.
#[derive(Debug, Clone, PartialEq)]
pub enum ControlEvent {
    /// Signals that a frame has been rendered and acknowledged by the driver.
    FrameRendered,
    /// Signals a resize of the terminal display area.
    Resize { cols: usize, rows: usize },
}

// --- Emulator Actions (Signaled to Orchestrator) ---

/// Actions that the terminal emulator signals to the orchestrator.
///
/// These are produced by the `TerminalEmulator` after interpreting input
/// and represent tasks for the main application loop (orchestrator) to perform.
#[derive(Debug, Clone, PartialEq)]
pub enum EmulatorAction {
    /// Request to write the given bytes to the PTY (Pseudo-Terminal).
    /// This typically contains user input or responses generated by the terminal.
    WritePty(Vec<u8>),

    /// Request to set the terminal window's title.
    SetTitle(String),

    /// Request to ring the terminal bell.
    RingBell,

    /// Signal that some part of the terminal display has changed and a redraw
    /// by the renderer is likely needed.
    RequestRedraw, // Note: NORTH_STAR.md v1.9.4 suggests this is implicit after rendering.
                   // Keeping it for now as it's a common signal.

    /// Request to set the visibility of the (potentially native) cursor by the driver.
    SetCursorVisibility(bool),

    /// Request to copy the provided text to the system clipboard.
    CopyToClipboard(String),

    /// Request for the orchestrator to fetch content from the system clipboard.
    /// The orchestrator should then feed this back via `EmulatorInput::User(UserInputAction::PasteText(...))`.
    RequestClipboardContent,
}
